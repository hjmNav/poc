/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.aap.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Response extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1132347365965250882L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Response\",\"namespace\":\"no.nav.aap.avro\",\"fields\":[{\"name\":\"erMedlem\",\"type\":{\"type\":\"enum\",\"name\":\"ErMedlem\",\"symbols\":[\"JA\",\"NEI\",\"UAVKLART\"]}},{\"name\":\"begrunnelse\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Response> ENCODER =
      new BinaryMessageEncoder<Response>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Response> DECODER =
      new BinaryMessageDecoder<Response>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Response> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Response> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Response> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Response>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Response to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Response from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Response instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Response fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private no.nav.aap.avro.ErMedlem erMedlem;
  private java.lang.String begrunnelse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Response() {}

  /**
   * All-args constructor.
   * @param erMedlem The new value for erMedlem
   * @param begrunnelse The new value for begrunnelse
   */
  public Response(no.nav.aap.avro.ErMedlem erMedlem, java.lang.String begrunnelse) {
    this.erMedlem = erMedlem;
    this.begrunnelse = begrunnelse;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return erMedlem;
    case 1: return begrunnelse;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: erMedlem = (no.nav.aap.avro.ErMedlem)value$; break;
    case 1: begrunnelse = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'erMedlem' field.
   * @return The value of the 'erMedlem' field.
   */
  public no.nav.aap.avro.ErMedlem getErMedlem() {
    return erMedlem;
  }


  /**
   * Sets the value of the 'erMedlem' field.
   * @param value the value to set.
   */
  public void setErMedlem(no.nav.aap.avro.ErMedlem value) {
    this.erMedlem = value;
  }

  /**
   * Gets the value of the 'begrunnelse' field.
   * @return The value of the 'begrunnelse' field.
   */
  public java.lang.String getBegrunnelse() {
    return begrunnelse;
  }


  /**
   * Sets the value of the 'begrunnelse' field.
   * @param value the value to set.
   */
  public void setBegrunnelse(java.lang.String value) {
    this.begrunnelse = value;
  }

  /**
   * Creates a new Response RecordBuilder.
   * @return A new Response RecordBuilder
   */
  public static no.nav.aap.avro.Response.Builder newBuilder() {
    return new no.nav.aap.avro.Response.Builder();
  }

  /**
   * Creates a new Response RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Response RecordBuilder
   */
  public static no.nav.aap.avro.Response.Builder newBuilder(no.nav.aap.avro.Response.Builder other) {
    if (other == null) {
      return new no.nav.aap.avro.Response.Builder();
    } else {
      return new no.nav.aap.avro.Response.Builder(other);
    }
  }

  /**
   * Creates a new Response RecordBuilder by copying an existing Response instance.
   * @param other The existing instance to copy.
   * @return A new Response RecordBuilder
   */
  public static no.nav.aap.avro.Response.Builder newBuilder(no.nav.aap.avro.Response other) {
    if (other == null) {
      return new no.nav.aap.avro.Response.Builder();
    } else {
      return new no.nav.aap.avro.Response.Builder(other);
    }
  }

  /**
   * RecordBuilder for Response instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Response>
    implements org.apache.avro.data.RecordBuilder<Response> {

    private no.nav.aap.avro.ErMedlem erMedlem;
    private java.lang.String begrunnelse;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.aap.avro.Response.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.erMedlem)) {
        this.erMedlem = data().deepCopy(fields()[0].schema(), other.erMedlem);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.begrunnelse)) {
        this.begrunnelse = data().deepCopy(fields()[1].schema(), other.begrunnelse);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Response instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.aap.avro.Response other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.erMedlem)) {
        this.erMedlem = data().deepCopy(fields()[0].schema(), other.erMedlem);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.begrunnelse)) {
        this.begrunnelse = data().deepCopy(fields()[1].schema(), other.begrunnelse);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'erMedlem' field.
      * @return The value.
      */
    public no.nav.aap.avro.ErMedlem getErMedlem() {
      return erMedlem;
    }


    /**
      * Sets the value of the 'erMedlem' field.
      * @param value The value of 'erMedlem'.
      * @return This builder.
      */
    public no.nav.aap.avro.Response.Builder setErMedlem(no.nav.aap.avro.ErMedlem value) {
      validate(fields()[0], value);
      this.erMedlem = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'erMedlem' field has been set.
      * @return True if the 'erMedlem' field has been set, false otherwise.
      */
    public boolean hasErMedlem() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'erMedlem' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Response.Builder clearErMedlem() {
      erMedlem = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'begrunnelse' field.
      * @return The value.
      */
    public java.lang.String getBegrunnelse() {
      return begrunnelse;
    }


    /**
      * Sets the value of the 'begrunnelse' field.
      * @param value The value of 'begrunnelse'.
      * @return This builder.
      */
    public no.nav.aap.avro.Response.Builder setBegrunnelse(java.lang.String value) {
      validate(fields()[1], value);
      this.begrunnelse = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'begrunnelse' field has been set.
      * @return True if the 'begrunnelse' field has been set, false otherwise.
      */
    public boolean hasBegrunnelse() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'begrunnelse' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Response.Builder clearBegrunnelse() {
      begrunnelse = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Response build() {
      try {
        Response record = new Response();
        record.erMedlem = fieldSetFlags()[0] ? this.erMedlem : (no.nav.aap.avro.ErMedlem) defaultValue(fields()[0]);
        record.begrunnelse = fieldSetFlags()[1] ? this.begrunnelse : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Response>
    WRITER$ = (org.apache.avro.io.DatumWriter<Response>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Response>
    READER$ = (org.apache.avro.io.DatumReader<Response>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.erMedlem.ordinal());

    if (this.begrunnelse == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.begrunnelse);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.erMedlem = no.nav.aap.avro.ErMedlem.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.begrunnelse = null;
      } else {
        this.begrunnelse = in.readString();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.erMedlem = no.nav.aap.avro.ErMedlem.values()[in.readEnum()];
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.begrunnelse = null;
          } else {
            this.begrunnelse = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










