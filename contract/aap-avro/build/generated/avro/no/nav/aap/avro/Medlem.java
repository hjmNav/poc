/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.aap.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Medlem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6794682395899946131L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Medlem\",\"namespace\":\"no.nav.aap.avro\",\"fields\":[{\"name\":\"personident\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"request\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Request\",\"fields\":[{\"name\":\"mottattDato\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ytelse\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"arbeidetUtenlands\",\"type\":\"boolean\"}]}],\"default\":null},{\"name\":\"response\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Response\",\"fields\":[{\"name\":\"erMedlem\",\"type\":{\"type\":\"enum\",\"name\":\"ErMedlem\",\"symbols\":[\"JA\",\"NEI\",\"UAVKLART\"]}},{\"name\":\"begrunnelse\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Medlem> ENCODER =
      new BinaryMessageEncoder<Medlem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Medlem> DECODER =
      new BinaryMessageDecoder<Medlem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Medlem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Medlem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Medlem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Medlem>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Medlem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Medlem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Medlem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Medlem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String personident;
  private java.lang.String id;
  private no.nav.aap.avro.Request request;
  private no.nav.aap.avro.Response response;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Medlem() {}

  /**
   * All-args constructor.
   * @param personident The new value for personident
   * @param id The new value for id
   * @param request The new value for request
   * @param response The new value for response
   */
  public Medlem(java.lang.String personident, java.lang.String id, no.nav.aap.avro.Request request, no.nav.aap.avro.Response response) {
    this.personident = personident;
    this.id = id;
    this.request = request;
    this.response = response;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return personident;
    case 1: return id;
    case 2: return request;
    case 3: return response;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: personident = value$ != null ? value$.toString() : null; break;
    case 1: id = value$ != null ? value$.toString() : null; break;
    case 2: request = (no.nav.aap.avro.Request)value$; break;
    case 3: response = (no.nav.aap.avro.Response)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'personident' field.
   * @return The value of the 'personident' field.
   */
  public java.lang.String getPersonident() {
    return personident;
  }


  /**
   * Sets the value of the 'personident' field.
   * @param value the value to set.
   */
  public void setPersonident(java.lang.String value) {
    this.personident = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'request' field.
   * @return The value of the 'request' field.
   */
  public no.nav.aap.avro.Request getRequest() {
    return request;
  }


  /**
   * Sets the value of the 'request' field.
   * @param value the value to set.
   */
  public void setRequest(no.nav.aap.avro.Request value) {
    this.request = value;
  }

  /**
   * Gets the value of the 'response' field.
   * @return The value of the 'response' field.
   */
  public no.nav.aap.avro.Response getResponse() {
    return response;
  }


  /**
   * Sets the value of the 'response' field.
   * @param value the value to set.
   */
  public void setResponse(no.nav.aap.avro.Response value) {
    this.response = value;
  }

  /**
   * Creates a new Medlem RecordBuilder.
   * @return A new Medlem RecordBuilder
   */
  public static no.nav.aap.avro.Medlem.Builder newBuilder() {
    return new no.nav.aap.avro.Medlem.Builder();
  }

  /**
   * Creates a new Medlem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Medlem RecordBuilder
   */
  public static no.nav.aap.avro.Medlem.Builder newBuilder(no.nav.aap.avro.Medlem.Builder other) {
    if (other == null) {
      return new no.nav.aap.avro.Medlem.Builder();
    } else {
      return new no.nav.aap.avro.Medlem.Builder(other);
    }
  }

  /**
   * Creates a new Medlem RecordBuilder by copying an existing Medlem instance.
   * @param other The existing instance to copy.
   * @return A new Medlem RecordBuilder
   */
  public static no.nav.aap.avro.Medlem.Builder newBuilder(no.nav.aap.avro.Medlem other) {
    if (other == null) {
      return new no.nav.aap.avro.Medlem.Builder();
    } else {
      return new no.nav.aap.avro.Medlem.Builder(other);
    }
  }

  /**
   * RecordBuilder for Medlem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Medlem>
    implements org.apache.avro.data.RecordBuilder<Medlem> {

    private java.lang.String personident;
    private java.lang.String id;
    private no.nav.aap.avro.Request request;
    private no.nav.aap.avro.Request.Builder requestBuilder;
    private no.nav.aap.avro.Response response;
    private no.nav.aap.avro.Response.Builder responseBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.aap.avro.Medlem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.personident)) {
        this.personident = data().deepCopy(fields()[0].schema(), other.personident);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.request)) {
        this.request = data().deepCopy(fields()[2].schema(), other.request);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasRequestBuilder()) {
        this.requestBuilder = no.nav.aap.avro.Request.newBuilder(other.getRequestBuilder());
      }
      if (isValidValue(fields()[3], other.response)) {
        this.response = data().deepCopy(fields()[3].schema(), other.response);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasResponseBuilder()) {
        this.responseBuilder = no.nav.aap.avro.Response.newBuilder(other.getResponseBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Medlem instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.aap.avro.Medlem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.personident)) {
        this.personident = data().deepCopy(fields()[0].schema(), other.personident);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.request)) {
        this.request = data().deepCopy(fields()[2].schema(), other.request);
        fieldSetFlags()[2] = true;
      }
      this.requestBuilder = null;
      if (isValidValue(fields()[3], other.response)) {
        this.response = data().deepCopy(fields()[3].schema(), other.response);
        fieldSetFlags()[3] = true;
      }
      this.responseBuilder = null;
    }

    /**
      * Gets the value of the 'personident' field.
      * @return The value.
      */
    public java.lang.String getPersonident() {
      return personident;
    }


    /**
      * Sets the value of the 'personident' field.
      * @param value The value of 'personident'.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder setPersonident(java.lang.String value) {
      validate(fields()[0], value);
      this.personident = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'personident' field has been set.
      * @return True if the 'personident' field has been set, false otherwise.
      */
    public boolean hasPersonident() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'personident' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder clearPersonident() {
      personident = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder setId(java.lang.String value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'request' field.
      * @return The value.
      */
    public no.nav.aap.avro.Request getRequest() {
      return request;
    }


    /**
      * Sets the value of the 'request' field.
      * @param value The value of 'request'.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder setRequest(no.nav.aap.avro.Request value) {
      validate(fields()[2], value);
      this.requestBuilder = null;
      this.request = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'request' field has been set.
      * @return True if the 'request' field has been set, false otherwise.
      */
    public boolean hasRequest() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'request' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public no.nav.aap.avro.Request.Builder getRequestBuilder() {
      if (requestBuilder == null) {
        if (hasRequest()) {
          setRequestBuilder(no.nav.aap.avro.Request.newBuilder(request));
        } else {
          setRequestBuilder(no.nav.aap.avro.Request.newBuilder());
        }
      }
      return requestBuilder;
    }

    /**
     * Sets the Builder instance for the 'request' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.nav.aap.avro.Medlem.Builder setRequestBuilder(no.nav.aap.avro.Request.Builder value) {
      clearRequest();
      requestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'request' field has an active Builder instance
     * @return True if the 'request' field has an active Builder instance
     */
    public boolean hasRequestBuilder() {
      return requestBuilder != null;
    }

    /**
      * Clears the value of the 'request' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder clearRequest() {
      request = null;
      requestBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'response' field.
      * @return The value.
      */
    public no.nav.aap.avro.Response getResponse() {
      return response;
    }


    /**
      * Sets the value of the 'response' field.
      * @param value The value of 'response'.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder setResponse(no.nav.aap.avro.Response value) {
      validate(fields()[3], value);
      this.responseBuilder = null;
      this.response = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'response' field has been set.
      * @return True if the 'response' field has been set, false otherwise.
      */
    public boolean hasResponse() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'response' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public no.nav.aap.avro.Response.Builder getResponseBuilder() {
      if (responseBuilder == null) {
        if (hasResponse()) {
          setResponseBuilder(no.nav.aap.avro.Response.newBuilder(response));
        } else {
          setResponseBuilder(no.nav.aap.avro.Response.newBuilder());
        }
      }
      return responseBuilder;
    }

    /**
     * Sets the Builder instance for the 'response' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.nav.aap.avro.Medlem.Builder setResponseBuilder(no.nav.aap.avro.Response.Builder value) {
      clearResponse();
      responseBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'response' field has an active Builder instance
     * @return True if the 'response' field has an active Builder instance
     */
    public boolean hasResponseBuilder() {
      return responseBuilder != null;
    }

    /**
      * Clears the value of the 'response' field.
      * @return This builder.
      */
    public no.nav.aap.avro.Medlem.Builder clearResponse() {
      response = null;
      responseBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Medlem build() {
      try {
        Medlem record = new Medlem();
        record.personident = fieldSetFlags()[0] ? this.personident : (java.lang.String) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.String) defaultValue(fields()[1]);
        if (requestBuilder != null) {
          try {
            record.request = this.requestBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("request"));
            throw e;
          }
        } else {
          record.request = fieldSetFlags()[2] ? this.request : (no.nav.aap.avro.Request) defaultValue(fields()[2]);
        }
        if (responseBuilder != null) {
          try {
            record.response = this.responseBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("response"));
            throw e;
          }
        } else {
          record.response = fieldSetFlags()[3] ? this.response : (no.nav.aap.avro.Response) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Medlem>
    WRITER$ = (org.apache.avro.io.DatumWriter<Medlem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Medlem>
    READER$ = (org.apache.avro.io.DatumReader<Medlem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.personident);

    out.writeString(this.id);

    if (this.request == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.request.customEncode(out);
    }

    if (this.response == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.response.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.personident = in.readString();

      this.id = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.request = null;
      } else {
        if (this.request == null) {
          this.request = new no.nav.aap.avro.Request();
        }
        this.request.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.response = null;
      } else {
        if (this.response == null) {
          this.response = new no.nav.aap.avro.Response();
        }
        this.response.customDecode(in);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.personident = in.readString();
          break;

        case 1:
          this.id = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.request = null;
          } else {
            if (this.request == null) {
              this.request = new no.nav.aap.avro.Request();
            }
            this.request.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.response = null;
          } else {
            if (this.response == null) {
              this.response = new no.nav.aap.avro.Response();
            }
            this.response.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










